initSidebarItems({"enum":[["DomainGoal",""],["Goal",""],["ImplType",""],["InlineBound","An inline bound, e.g. `: Foo<K>` in `impl<K, T: Foo<K>> SomeType<T>`."],["Item",""],["Kind",""],["LeafGoal",""],["Lifetime",""],["Parameter",""],["ParameterKind",""],["PolarizedTraitRef",""],["Ty",""],["WhereClause",""]],"struct":[["AssocTyDefn",""],["AssocTyValue",""],["Clause","This allows users to add arbitrary `A :- B` clauses into the logic; it has no equivalent in Rust, but it's useful for testing."],["Field",""],["Identifier",""],["Impl",""],["Program",""],["ProjectionEqBound","Represents a projection equality bound on e.g. a type or type parameter. Does not know anything about what it's binding."],["ProjectionTy",""],["QuantifiedInlineBound",""],["QuantifiedWhereClause",""],["Span",""],["StructDefn",""],["StructFlags",""],["TraitBound","Represents a trait bound on e.g. a type or type parameter. Does not know anything about what it's binding."],["TraitDefn",""],["TraitFlags",""],["TraitRef",""]]});